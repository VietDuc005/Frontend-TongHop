import React, { useState, useEffect } from "react";
import Table from "../components/common/Table";
import SearchBar from "../components/common/SearchBar";
import Box from "../components/common/Box";
import { Plus } from "lucide-react";
import { customerService } from "../services/customerService";

const CustomerManagement = () => {
  // ===================== STATE =====================
  const [customers, setCustomers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("T·∫•t c·∫£ tr·∫°ng th√°i");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingData, setEditingData] = useState(null);
  const [modalMode, setModalMode] = useState("add"); // 'add' | 'edit' | 'view'

  // ===================== FETCH DATA =====================
  const fetchData = async () => {
    try {
      setLoading(true);
      const response = await customerService.getAll();
      const list = response.content || response;

      const mapped = list.map((c) => ({
        id: c.maKhachHang || c.id,
        tenKhachHang: c.tenKhachHang,
        soDienThoai: c.soDienThoai,
        email: c.email,
        diaChi: c.diaChi,
        loaiKhach: c.loaiKhach || "C√° nh√¢n",
        ghiChu: c.ghiChu || "",
        status: c.trangThai || "Ho·∫°t ƒë·ªông",
      }));

      setCustomers(mapped);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch kh√°ch h√†ng:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√°ch h√†ng t·ª´ server.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // ===================== HANDLERS =====================
  const handleAdd = () => {
    setModalMode("add");
    setEditingData(null);
    setIsModalOpen(true);
  };

  const handleView = (row) => {
    setModalMode("view");
    setEditingData(row);
    setIsModalOpen(true);
  };

  const handleEdit = (row) => {
    setModalMode("edit");
    setEditingData(row);
    setIsModalOpen(true);
  };

  const handleDelete = async (id) => {
    if (!id) return alert("L·ªói: Kh√¥ng t√¨m th·∫•y ID kh√°ch h√†ng.");
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√°ch h√†ng n√†y kh√¥ng?")) {
      try {
        await customerService.remove(id);
        alert("X√≥a th√†nh c√¥ng!");
        fetchData();
      } catch (err) {
        console.error("‚ùå L·ªói khi x√≥a kh√°ch h√†ng:", err);
        setError("X√≥a kh√°ch h√†ng th·∫•t b·∫°i.");
      }
    }
  };

  const handleSave = async (formData) => {
    try {
      if (modalMode === "edit") {
        await customerService.update(editingData.id, formData);
        alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      } else {
        await customerService.create(formData);
        alert("Th√™m m·ªõi th√†nh c√¥ng!");
      }
      setIsModalOpen(false);
      fetchData();
    } catch (err) {
      console.error("‚ùå L·ªói khi l∆∞u kh√°ch h√†ng:", err);
      setError("L∆∞u th√¥ng tin th·∫•t b·∫°i.");
    }
  };

  // ===================== FILTERING =====================
  const filtered = customers.filter((c) => {
    const matchSearch =
      c.tenKhachHang?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      c.soDienThoai?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      c.email?.toLowerCase().includes(searchTerm.toLowerCase());

    const matchStatus =
      statusFilter === "T·∫•t c·∫£ tr·∫°ng th√°i" || c.status === statusFilter;

    return matchSearch && matchStatus;
  });

  // ===================== CONFIG =====================
  const columns = [
    {
      key: "tenKhachHang",
      label: "Kh√°ch h√†ng",
      render: (value, row) => (
        <div className="flex flex-col">
          <span className="font-semibold text-gray-800">{value}</span>
          <span className="text-xs text-gray-500">{row.id}</span>
        </div>
      ),
    },
    {
      key: "soDienThoai",
      label: "Li√™n h·ªá",
      render: (value, row) => (
        <div className="flex flex-col gap-1 text-sm">
          <div className="flex items-center gap-2">
            <span>üìû</span>
            <span>{row.soDienThoai}</span>
          </div>
          <div className="flex items-center gap-2 text-gray-500">
            <span>‚úâÔ∏è</span>
            <span>{row.email}</span>
          </div>
        </div>
      ),
    },
    { key: "diaChi", label: "ƒê·ªãa ch·ªâ" },
    {
      key: "status",
      label: "Tr·∫°ng th√°i",
      render: (value) => (
        <span
          className={`px-3 py-1 text-xs font-semibold rounded-full ${
            value === "Ho·∫°t ƒë·ªông"
              ? "bg-green-100 text-green-800"
              : "bg-gray-200 text-gray-700"
          }`}
        >
          {value}
        </span>
      ),
    },
  ];

  const customerFields = [
    { name: "tenKhachHang", label: "T√™n kh√°ch h√†ng", type: "text" },
    { name: "soDienThoai", label: "S·ªë ƒëi·ªán tho·∫°i", type: "tel" },
    { name: "email", label: "Email", type: "email" },
    { name: "diaChi", label: "ƒê·ªãa ch·ªâ", type: "text" },
    {
      name: "loaiKhach",
      label: "Lo·∫°i kh√°ch",
      type: "select",
      options: ["C√° nh√¢n", "Doanh nghi·ªáp"],
    },
    { name: "ghiChu", label: "Ghi ch√∫", type: "textarea" },
  ];

  const getModalTitle = () => {
    if (modalMode === "view") return "Chi ti·∫øt Kh√°ch h√†ng";
    if (modalMode === "edit") return "Ch·ªânh s·ª≠a Kh√°ch h√†ng";
    return "Th√™m Kh√°ch h√†ng m·ªõi";
  };

  // ===================== UI =====================
  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between bg-white p-6 rounded-xl shadow">
        <h2 className="text-xl font-bold text-gray-800">Qu·∫£n l√Ω Kh√°ch h√†ng</h2>
        <button
          onClick={handleAdd}
          className="flex items-center gap-2 bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg font-semibold"
        >
          <Plus size={18} /> Th√™m kh√°ch h√†ng
        </button>
      </div>

      {/* B·ªô l·ªçc & t√¨m ki·∫øm */}
      <div className="bg-white p-6 rounded-xl shadow flex items-center gap-4">
        <SearchBar
          searchTerm={searchTerm}
          onSearchChange={setSearchTerm}
          placeholder="T√¨m theo t√™n, SƒêT, email..."
        />
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
          className="border border-gray-300 px-3 py-2 rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-transparent"
        >
          <option>T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option>Ho·∫°t ƒë·ªông</option>
          <option>D·ª´ng ho·∫°t ƒë·ªông</option>
        </select>
      </div>

      {/* Hi·ªÉn th·ªã l·ªói */}
      {error && (
        <div className="bg-red-100 text-red-600 p-4 rounded-lg text-sm">
          {error}
        </div>
      )}

      {/* B·∫£ng d·ªØ li·ªáu */}
      <Table
        columns={columns}
        data={filtered}
        loading={loading}
        onView={handleView}
        onEdit={handleEdit}
        onDelete={(row) => handleDelete(row.id)}
      />

      {/* Modal Box (d√πng chung) */}
      {isModalOpen && (
        <Box
          mode={modalMode}
          title={getModalTitle()}
          fields={customerFields}
          initialData={editingData}
          onClose={() => setIsModalOpen(false)}
          onSubmit={handleSave}
        />
      )}
    </div>
  );
};

export default CustomerManagement;
